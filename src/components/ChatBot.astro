<div class="fixed bottom-4 right-4 z-50">
  <button
    id="chat-toggle"
    class="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-300"
    aria-label="Toggle chat"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
      />
    </svg>
  </button>

  <div
    id="chat-container"
    class="hidden fixed bottom-20 right-4 w-96 h-[600px] bg-white rounded-lg shadow-xl flex flex-col"
  >
    <div class="p-4 bg-blue-600 text-white rounded-t-lg flex justify-between items-center">
      <h3 class="font-semibold">Portfolio Assistant</h3>
      <button
        id="close-chat"
        class="text-white hover:text-gray-200"
        aria-label="Close chat"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <div
      id="chat-messages"
      class="flex-1 overflow-y-auto p-4 space-y-4"
    ></div>

    <div class="p-4 border-t">
      <form id="chat-form" class="flex gap-2">
        <input
          type="text"
          id="chat-input"
          class="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Ask me anything..."
          required
        />
        <button
          type="submit"
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<script>
  let chatContainer: HTMLElement;
  let chatToggle: HTMLElement;
  let closeChat: HTMLElement;
  let chatForm: HTMLFormElement;
  let chatInput: HTMLInputElement;
  let chatMessages: HTMLElement;

  document.addEventListener('DOMContentLoaded', () => {
    chatContainer = document.getElementById('chat-container') as HTMLElement;
    chatToggle = document.getElementById('chat-toggle') as HTMLElement;
    closeChat = document.getElementById('close-chat') as HTMLElement;
    chatForm = document.getElementById('chat-form') as HTMLFormElement;
    chatInput = document.getElementById('chat-input') as HTMLInputElement;
    chatMessages = document.getElementById('chat-messages') as HTMLElement;

    // Add initial greeting
    addMessage('Hello! I\'m your portfolio assistant. How can I help you today?', 'bot');

    chatToggle.addEventListener('click', () => {
      chatContainer.classList.toggle('hidden');
    });

    closeChat.addEventListener('click', () => {
      chatContainer.classList.add('hidden');
    });

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = chatInput.value.trim();
      if (!message) return;

      // Add user message
      addMessage(message, 'user');
      chatInput.value = '';

      // Show loading state
      const loadingId = addMessage('Thinking...', 'bot', true);

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });

        const data = await response.json();

        // Remove loading message
        const loadingMessage = document.getElementById(loadingId);
        if (loadingMessage) {
          loadingMessage.remove();
        }

        // Add bot response
        addMessage(data.response, 'bot');
      } catch (error) {
        console.error('Error:', error);
        // Remove loading message
        const loadingMessage = document.getElementById(loadingId);
        if (loadingMessage) {
          loadingMessage.remove();
        }
        addMessage('Sorry, I encountered an error. Please try again.', 'bot');
      }
    });
  });

  function addMessage(text: string, sender: 'user' | 'bot', isLoading = false): string {
    const messageDiv = document.createElement('div');
    const messageId = `msg-${Date.now()}`;
    messageDiv.id = messageId;
    messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'}`;

    const messageBubble = document.createElement('div');
    messageBubble.className = `max-w-[80%] p-3 rounded-lg ${
      sender === 'user'
        ? 'bg-blue-600 text-white rounded-br-none'
        : 'bg-gray-100 text-gray-800 rounded-bl-none'
    }`;

    if (isLoading) {
      messageBubble.innerHTML = `
        <div class="flex space-x-2">
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
        </div>
      `;
    } else {
      messageBubble.textContent = text;
    }

    messageDiv.appendChild(messageBubble);
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    return messageId;
  }
</script> 